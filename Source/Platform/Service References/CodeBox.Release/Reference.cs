// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Tools.TeamMate.Platform.CodeBox.Release
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://CodeBox/services/ReleaseService/v1.0", ConfigurationName="CodeBox.Release.ReleaseServiceSoap")]
    public interface ReleaseServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/CreateRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int CreateRelease(string projectName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, string releaseVersion, string releaseDescription, string releaseDate, bool showOnHomePage, bool isDefaultRelease);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/CreateRelease", ReplyAction="*")]
        System.Threading.Tasks.Task<int> CreateReleaseAsync(string projectName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, string releaseVersion, string releaseDescription, string releaseDate, bool showOnHomePage, bool isDefaultRelease);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/UploadReleaseFilesById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UploadReleaseFilesById(string projectName, int releaseId, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseFile[] files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/UploadReleaseFilesById", ReplyAction="*")]
        System.Threading.Tasks.Task UploadReleaseFilesByIdAsync(string projectName, int releaseId, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseFile[] files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/UploadReleaseFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UploadReleaseFiles(string projectName, string releaseVersion, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseFile[] files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/UploadReleaseFiles", ReplyAction="*")]
        System.Threading.Tasks.Task UploadReleaseFilesAsync(string projectName, string releaseVersion, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseFile[] files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/CreateFileShareForRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateFileShareForRelease(string entryName, int releaseId, string fileNameToOpen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/CreateFileShareForRelease", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateFileShareForReleaseAsync(string entryName, int releaseId, string fileNameToOpen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/SetCustomInstallLocationForRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetCustomInstallLocationForRelease(string entryName, int releaseId, string installLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/SetCustomInstallLocationForRelease", ReplyAction="*")]
        System.Threading.Tasks.Task SetCustomInstallLocationForReleaseAsync(string entryName, int releaseId, string installLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/GetReleasesByProjectName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetReleasesByProjectName(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/GetReleasesByProjectName", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReleasesByProjectNameAsync(string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/GetReleaseFilesById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetReleaseFilesById(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/GetReleaseFilesById", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReleaseFilesByIdAsync(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/DeleteReleases", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteReleases(string projectName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, int keepLastXReleases);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/DeleteReleases", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteReleasesAsync(string projectName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, int keepLastXReleases);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/DeleteRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteRelease(string projectName, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/DeleteRelease", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteReleaseAsync(string projectName, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/DeleteReleaseFilesById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteReleaseFilesById(string projectName, int releaseId, string[] fileNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/DeleteReleaseFilesById", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteReleaseFilesByIdAsync(string projectName, int releaseId, string[] fileNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/Ping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/ReleaseService/v1.0/Ping", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> PingAsync();
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://CodeBox/services/ReleaseService/v1.0")]
    public enum ReleaseQualityName {
        
        /// <remarks/>
        Alpha,
        
        /// <remarks/>
        Beta,
        
        /// <remarks/>
        Production,
        
        /// <remarks/>
        Draft,
        
        /// <remarks/>
        Final,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://CodeBox/services/ReleaseService/v1.0")]
    public partial class ReleaseFile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string friendlyLabelField;
        
        private string fileNameField;
        
        private byte[] fileDataField;
        
        private string fileTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string FriendlyLabel {
            get {
                return this.friendlyLabelField;
            }
            set {
                this.friendlyLabelField = value;
                this.RaisePropertyChanged("FriendlyLabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
                this.RaisePropertyChanged("FileName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=2)]
        public byte[] FileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
                this.RaisePropertyChanged("FileData");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string FileType {
            get {
                return this.fileTypeField;
            }
            set {
                this.fileTypeField = value;
                this.RaisePropertyChanged("FileType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ReleaseServiceSoapChannel : Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReleaseServiceSoapClient : System.ServiceModel.ClientBase<Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseServiceSoap>, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseServiceSoap {
        
        public ReleaseServiceSoapClient() {
        }
        
        public ReleaseServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReleaseServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReleaseServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReleaseServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CreateRelease(string projectName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, string releaseVersion, string releaseDescription, string releaseDate, bool showOnHomePage, bool isDefaultRelease) {
            return base.Channel.CreateRelease(projectName, qualityName, releaseVersion, releaseDescription, releaseDate, showOnHomePage, isDefaultRelease);
        }
        
        public System.Threading.Tasks.Task<int> CreateReleaseAsync(string projectName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, string releaseVersion, string releaseDescription, string releaseDate, bool showOnHomePage, bool isDefaultRelease) {
            return base.Channel.CreateReleaseAsync(projectName, qualityName, releaseVersion, releaseDescription, releaseDate, showOnHomePage, isDefaultRelease);
        }
        
        public void UploadReleaseFilesById(string projectName, int releaseId, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseFile[] files) {
            base.Channel.UploadReleaseFilesById(projectName, releaseId, files);
        }
        
        public System.Threading.Tasks.Task UploadReleaseFilesByIdAsync(string projectName, int releaseId, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseFile[] files) {
            return base.Channel.UploadReleaseFilesByIdAsync(projectName, releaseId, files);
        }
        
        public void UploadReleaseFiles(string projectName, string releaseVersion, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseFile[] files) {
            base.Channel.UploadReleaseFiles(projectName, releaseVersion, qualityName, files);
        }
        
        public System.Threading.Tasks.Task UploadReleaseFilesAsync(string projectName, string releaseVersion, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseFile[] files) {
            return base.Channel.UploadReleaseFilesAsync(projectName, releaseVersion, qualityName, files);
        }
        
        public string CreateFileShareForRelease(string entryName, int releaseId, string fileNameToOpen) {
            return base.Channel.CreateFileShareForRelease(entryName, releaseId, fileNameToOpen);
        }
        
        public System.Threading.Tasks.Task<string> CreateFileShareForReleaseAsync(string entryName, int releaseId, string fileNameToOpen) {
            return base.Channel.CreateFileShareForReleaseAsync(entryName, releaseId, fileNameToOpen);
        }
        
        public void SetCustomInstallLocationForRelease(string entryName, int releaseId, string installLocation) {
            base.Channel.SetCustomInstallLocationForRelease(entryName, releaseId, installLocation);
        }
        
        public System.Threading.Tasks.Task SetCustomInstallLocationForReleaseAsync(string entryName, int releaseId, string installLocation) {
            return base.Channel.SetCustomInstallLocationForReleaseAsync(entryName, releaseId, installLocation);
        }
        
        public System.Data.DataSet GetReleasesByProjectName(string projectName) {
            return base.Channel.GetReleasesByProjectName(projectName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReleasesByProjectNameAsync(string projectName) {
            return base.Channel.GetReleasesByProjectNameAsync(projectName);
        }
        
        public System.Data.DataSet GetReleaseFilesById(int releaseId) {
            return base.Channel.GetReleaseFilesById(releaseId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReleaseFilesByIdAsync(int releaseId) {
            return base.Channel.GetReleaseFilesByIdAsync(releaseId);
        }
        
        public void DeleteReleases(string projectName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, int keepLastXReleases) {
            base.Channel.DeleteReleases(projectName, qualityName, keepLastXReleases);
        }
        
        public System.Threading.Tasks.Task DeleteReleasesAsync(string projectName, Microsoft.Tools.TeamMate.Platform.CodeBox.Release.ReleaseQualityName qualityName, int keepLastXReleases) {
            return base.Channel.DeleteReleasesAsync(projectName, qualityName, keepLastXReleases);
        }
        
        public void DeleteRelease(string projectName, int releaseId) {
            base.Channel.DeleteRelease(projectName, releaseId);
        }
        
        public System.Threading.Tasks.Task DeleteReleaseAsync(string projectName, int releaseId) {
            return base.Channel.DeleteReleaseAsync(projectName, releaseId);
        }
        
        public void DeleteReleaseFilesById(string projectName, int releaseId, string[] fileNames) {
            base.Channel.DeleteReleaseFilesById(projectName, releaseId, fileNames);
        }
        
        public System.Threading.Tasks.Task DeleteReleaseFilesByIdAsync(string projectName, int releaseId, string[] fileNames) {
            return base.Channel.DeleteReleaseFilesByIdAsync(projectName, releaseId, fileNames);
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync() {
            return base.Channel.PingAsync();
        }
    }
}
