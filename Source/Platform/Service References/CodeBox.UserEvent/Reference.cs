// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Tools.TeamMate.Platform.CodeBox.UserEvent
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://CodeBox/services/UserEventService/v1.0", ConfigurationName="CodeBox.UserEvent.UserEventServiceSoap")]
    public interface UserEventServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/UserEventService/v1.0/GetAllEvents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetAllEvents(System.DateTime startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/UserEventService/v1.0/GetAllEvents", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllEventsAsync(System.DateTime startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/UserEventService/v1.0/GetEventsForUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetEventsForUsers(System.DateTime startDate, string[] userNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/UserEventService/v1.0/GetEventsForUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetEventsForUsersAsync(System.DateTime startDate, string[] userNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/UserEventService/v1.0/GetEventsForEntries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetEventsForEntries(System.DateTime startDate, string[] entryNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/UserEventService/v1.0/GetEventsForEntries", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetEventsForEntriesAsync(System.DateTime startDate, string[] entryNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/UserEventService/v1.0/Ping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://CodeBox/services/UserEventService/v1.0/Ping", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> PingAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UserEventServiceSoapChannel : Microsoft.Tools.TeamMate.Platform.CodeBox.UserEvent.UserEventServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserEventServiceSoapClient : System.ServiceModel.ClientBase<Microsoft.Tools.TeamMate.Platform.CodeBox.UserEvent.UserEventServiceSoap>, Microsoft.Tools.TeamMate.Platform.CodeBox.UserEvent.UserEventServiceSoap {
        
        public UserEventServiceSoapClient() {
        }
        
        public UserEventServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserEventServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserEventServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserEventServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetAllEvents(System.DateTime startDate) {
            return base.Channel.GetAllEvents(startDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllEventsAsync(System.DateTime startDate) {
            return base.Channel.GetAllEventsAsync(startDate);
        }
        
        public System.Data.DataSet GetEventsForUsers(System.DateTime startDate, string[] userNames) {
            return base.Channel.GetEventsForUsers(startDate, userNames);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetEventsForUsersAsync(System.DateTime startDate, string[] userNames) {
            return base.Channel.GetEventsForUsersAsync(startDate, userNames);
        }
        
        public System.Data.DataSet GetEventsForEntries(System.DateTime startDate, string[] entryNames) {
            return base.Channel.GetEventsForEntries(startDate, entryNames);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetEventsForEntriesAsync(System.DateTime startDate, string[] entryNames) {
            return base.Channel.GetEventsForEntriesAsync(startDate, entryNames);
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync() {
            return base.Channel.PingAsync();
        }
    }
}
