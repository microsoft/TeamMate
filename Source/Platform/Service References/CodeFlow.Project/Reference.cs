//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Tools.TeamMate.Platform.CodeFlow.Project {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectInfo", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
    [System.SerializableAttribute()]
    public partial class ProjectInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DisplayNameField;
        
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] OwnersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RetiringField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string[] Owners {
            get {
                return this.OwnersField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnersField, value) != true)) {
                    this.OwnersField = value;
                    this.RaisePropertyChanged("Owners");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public bool Retiring {
            get {
                return this.RetiringField;
            }
            set {
                if ((this.RetiringField.Equals(value) != true)) {
                    this.RetiringField = value;
                    this.RaisePropertyChanged("Retiring");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
    [System.SerializableAttribute()]
    public partial class ServiceFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectQuery", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
    [System.SerializableAttribute()]
    public partial class ProjectQuery : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> ConfigContainsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameContainsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> EnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionConnectionStringContainsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> RetiringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameContainsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceControlConnectionStringContainsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedAfterDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedBeforeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastUpdatedAfterDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastUpdatedBeforeDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> ConfigContains {
            get {
                return this.ConfigContainsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigContainsField, value) != true)) {
                    this.ConfigContainsField = value;
                    this.RaisePropertyChanged("ConfigContains");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayNameContains {
            get {
                return this.DisplayNameContainsField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameContainsField, value) != true)) {
                    this.DisplayNameContainsField = value;
                    this.RaisePropertyChanged("DisplayNameContains");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtensionConnectionStringContains {
            get {
                return this.ExtensionConnectionStringContainsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionConnectionStringContainsField, value) != true)) {
                    this.ExtensionConnectionStringContainsField = value;
                    this.RaisePropertyChanged("ExtensionConnectionStringContains");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Retiring {
            get {
                return this.RetiringField;
            }
            set {
                if ((this.RetiringField.Equals(value) != true)) {
                    this.RetiringField = value;
                    this.RaisePropertyChanged("Retiring");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortNameContains {
            get {
                return this.ShortNameContainsField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameContainsField, value) != true)) {
                    this.ShortNameContainsField = value;
                    this.RaisePropertyChanged("ShortNameContains");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceControlConnectionStringContains {
            get {
                return this.SourceControlConnectionStringContainsField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceControlConnectionStringContainsField, value) != true)) {
                    this.SourceControlConnectionStringContainsField = value;
                    this.RaisePropertyChanged("SourceControlConnectionStringContains");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public System.Nullable<System.DateTime> CreatedAfterDate {
            get {
                return this.CreatedAfterDateField;
            }
            set {
                if ((this.CreatedAfterDateField.Equals(value) != true)) {
                    this.CreatedAfterDateField = value;
                    this.RaisePropertyChanged("CreatedAfterDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public System.Nullable<System.DateTime> CreatedBeforeDate {
            get {
                return this.CreatedBeforeDateField;
            }
            set {
                if ((this.CreatedBeforeDateField.Equals(value) != true)) {
                    this.CreatedBeforeDateField = value;
                    this.RaisePropertyChanged("CreatedBeforeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public System.Nullable<System.DateTime> LastUpdatedAfterDate {
            get {
                return this.LastUpdatedAfterDateField;
            }
            set {
                if ((this.LastUpdatedAfterDateField.Equals(value) != true)) {
                    this.LastUpdatedAfterDateField = value;
                    this.RaisePropertyChanged("LastUpdatedAfterDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public System.Nullable<System.DateTime> LastUpdatedBeforeDate {
            get {
                return this.LastUpdatedBeforeDateField;
            }
            set {
                if ((this.LastUpdatedBeforeDateField.Equals(value) != true)) {
                    this.LastUpdatedBeforeDateField = value;
                    this.RaisePropertyChanged("LastUpdatedBeforeDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
    [System.SerializableAttribute()]
    public partial class Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AccessSecurityGroupField;
        
        private System.Collections.Generic.Dictionary<string, string> ConfigurationField;
        
        private string[] DefaultOptionalReviewersField;
        
        private string[] DefaultRequiredReviewersField;
        
        private string DisplayNameField;
        
        private bool EnabledField;
        
        private string OwnerField;
        
        private bool RetiringField;
        
        private string ShortNameField;
        
        private string[] SourceControlConnectionStringsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] extensionConnectionStringsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdatedOnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string AccessSecurityGroup {
            get {
                return this.AccessSecurityGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessSecurityGroupField, value) != true)) {
                    this.AccessSecurityGroupField = value;
                    this.RaisePropertyChanged("AccessSecurityGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> Configuration {
            get {
                return this.ConfigurationField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigurationField, value) != true)) {
                    this.ConfigurationField = value;
                    this.RaisePropertyChanged("Configuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] DefaultOptionalReviewers {
            get {
                return this.DefaultOptionalReviewersField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultOptionalReviewersField, value) != true)) {
                    this.DefaultOptionalReviewersField = value;
                    this.RaisePropertyChanged("DefaultOptionalReviewers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] DefaultRequiredReviewers {
            get {
                return this.DefaultRequiredReviewersField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultRequiredReviewersField, value) != true)) {
                    this.DefaultRequiredReviewersField = value;
                    this.RaisePropertyChanged("DefaultRequiredReviewers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Retiring {
            get {
                return this.RetiringField;
            }
            set {
                if ((this.RetiringField.Equals(value) != true)) {
                    this.RetiringField = value;
                    this.RaisePropertyChanged("Retiring");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] SourceControlConnectionStrings {
            get {
                return this.SourceControlConnectionStringsField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceControlConnectionStringsField, value) != true)) {
                    this.SourceControlConnectionStringsField = value;
                    this.RaisePropertyChanged("SourceControlConnectionStrings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] extensionConnectionStrings {
            get {
                return this.extensionConnectionStringsField;
            }
            set {
                if ((object.ReferenceEquals(this.extensionConnectionStringsField, value) != true)) {
                    this.extensionConnectionStringsField = value;
                    this.RaisePropertyChanged("extensionConnectionStrings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public System.DateTime LastUpdatedOn {
            get {
                return this.LastUpdatedOnField;
            }
            set {
                if ((this.LastUpdatedOnField.Equals(value) != true)) {
                    this.LastUpdatedOnField = value;
                    this.RaisePropertyChanged("LastUpdatedOn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://www.microsoft.com/codeflow/")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedOnField;
        
        private string DisplayNameField;
        
        private string EmailField;
        
        private System.DateTime LastUpdatedOnField;
        
        private string NameField;
        
        private System.Collections.Generic.Dictionary<string, string> SettingsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime LastUpdatedOn {
            get {
                return this.LastUpdatedOnField;
            }
            set {
                if ((this.LastUpdatedOnField.Equals(value) != true)) {
                    this.LastUpdatedOnField = value;
                    this.RaisePropertyChanged("LastUpdatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> Settings {
            get {
                return this.SettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingsField, value) != true)) {
                    this.SettingsField = value;
                    this.RaisePropertyChanged("Settings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CodeFlow.Project.IProjectService")]
    public interface IProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectsContainingString", ReplyAction="http://tempuri.org/IProjectService/GetProjectsContainingStringResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/GetProjectsContainingStringServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[] GetProjectsContainingString(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectsContainingString", ReplyAction="http://tempuri.org/IProjectService/GetProjectsContainingStringResponse")]
        System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[]> GetProjectsContainingStringAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/QueryProjects", ReplyAction="http://tempuri.org/IProjectService/QueryProjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/QueryProjectsServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[] QueryProjects(string userAgent, Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectQuery query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/QueryProjects", ReplyAction="http://tempuri.org/IProjectService/QueryProjectsResponse")]
        System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[]> QueryProjectsAsync(string userAgent, Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectQuery query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectsStartingWith", ReplyAction="http://tempuri.org/IProjectService/GetProjectsStartingWithResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/GetProjectsStartingWithServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[] GetProjectsStartingWith(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectsStartingWith", ReplyAction="http://tempuri.org/IProjectService/GetProjectsStartingWithResponse")]
        System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[]> GetProjectsStartingWithAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectByShortName", ReplyAction="http://tempuri.org/IProjectService/GetProjectByShortNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/GetProjectByShortNameServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project GetProjectByShortName(string shortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectByShortName", ReplyAction="http://tempuri.org/IProjectService/GetProjectByShortNameResponse")]
        System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project> GetProjectByShortNameAsync(string shortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectsByShortNames", ReplyAction="http://tempuri.org/IProjectService/GetProjectsByShortNamesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/GetProjectsByShortNamesServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project[] GetProjectsByShortNames(string[] shortNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectsByShortNames", ReplyAction="http://tempuri.org/IProjectService/GetProjectsByShortNamesResponse")]
        System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project[]> GetProjectsByShortNamesAsync(string[] shortNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProject", ReplyAction="http://tempuri.org/IProjectService/AddProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/AddProjectServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        void AddProject(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProject", ReplyAction="http://tempuri.org/IProjectService/AddProjectResponse")]
        System.Threading.Tasks.Task AddProjectAsync(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProject", ReplyAction="http://tempuri.org/IProjectService/UpdateProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/UpdateProjectServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        void UpdateProject(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProject", ReplyAction="http://tempuri.org/IProjectService/UpdateProjectResponse")]
        System.Threading.Tasks.Task UpdateProjectAsync(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveProject", ReplyAction="http://tempuri.org/IProjectService/RemoveProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/RemoveProjectServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        void RemoveProject(string projectShortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveProject", ReplyAction="http://tempuri.org/IProjectService/RemoveProjectResponse")]
        System.Threading.Tasks.Task RemoveProjectAsync(string projectShortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetUser", ReplyAction="http://tempuri.org/IProjectService/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/GetUserServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User GetUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetUser", ReplyAction="http://tempuri.org/IProjectService/GetUserResponse")]
        System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User> GetUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddUser", ReplyAction="http://tempuri.org/IProjectService/AddUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/AddUserServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User AddUser(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddUser", ReplyAction="http://tempuri.org/IProjectService/AddUserResponse")]
        System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User> AddUserAsync(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/SetUserData", ReplyAction="http://tempuri.org/IProjectService/SetUserDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/SetUserDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User SetUserData(string username, System.Collections.Generic.Dictionary<string, string> data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/SetUserData", ReplyAction="http://tempuri.org/IProjectService/SetUserDataResponse")]
        System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User> SetUserDataAsync(string username, System.Collections.Generic.Dictionary<string, string> data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateUser", ReplyAction="http://tempuri.org/IProjectService/UpdateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/UpdateUserServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User UpdateUser(string username, Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateUser", ReplyAction="http://tempuri.org/IProjectService/UpdateUserResponse")]
        System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User> UpdateUserAsync(string username, Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteUser", ReplyAction="http://tempuri.org/IProjectService/DeleteUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ServiceFault), Action="http://tempuri.org/IProjectService/DeleteUserServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.CodeFlow.ServiceModel")]
        void DeleteUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteUser", ReplyAction="http://tempuri.org/IProjectService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectServiceChannel : Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.IProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectServiceClient : System.ServiceModel.ClientBase<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.IProjectService>, Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.IProjectService {
        
        public ProjectServiceClient() {
        }
        
        public ProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[] GetProjectsContainingString(string text) {
            return base.Channel.GetProjectsContainingString(text);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[]> GetProjectsContainingStringAsync(string text) {
            return base.Channel.GetProjectsContainingStringAsync(text);
        }
        
        public Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[] QueryProjects(string userAgent, Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectQuery query) {
            return base.Channel.QueryProjects(userAgent, query);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[]> QueryProjectsAsync(string userAgent, Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectQuery query) {
            return base.Channel.QueryProjectsAsync(userAgent, query);
        }
        
        public Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[] GetProjectsStartingWith(string text) {
            return base.Channel.GetProjectsStartingWith(text);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.ProjectInfo[]> GetProjectsStartingWithAsync(string text) {
            return base.Channel.GetProjectsStartingWithAsync(text);
        }
        
        public Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project GetProjectByShortName(string shortName) {
            return base.Channel.GetProjectByShortName(shortName);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project> GetProjectByShortNameAsync(string shortName) {
            return base.Channel.GetProjectByShortNameAsync(shortName);
        }
        
        public Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project[] GetProjectsByShortNames(string[] shortNames) {
            return base.Channel.GetProjectsByShortNames(shortNames);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project[]> GetProjectsByShortNamesAsync(string[] shortNames) {
            return base.Channel.GetProjectsByShortNamesAsync(shortNames);
        }
        
        public void AddProject(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project project) {
            base.Channel.AddProject(project);
        }
        
        public System.Threading.Tasks.Task AddProjectAsync(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project project) {
            return base.Channel.AddProjectAsync(project);
        }
        
        public void UpdateProject(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project project) {
            base.Channel.UpdateProject(project);
        }
        
        public System.Threading.Tasks.Task UpdateProjectAsync(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.Project project) {
            return base.Channel.UpdateProjectAsync(project);
        }
        
        public void RemoveProject(string projectShortName) {
            base.Channel.RemoveProject(projectShortName);
        }
        
        public System.Threading.Tasks.Task RemoveProjectAsync(string projectShortName) {
            return base.Channel.RemoveProjectAsync(projectShortName);
        }
        
        public Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User GetUser(string username) {
            return base.Channel.GetUser(username);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User> GetUserAsync(string username) {
            return base.Channel.GetUserAsync(username);
        }
        
        public Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User AddUser(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User> AddUserAsync(Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User SetUserData(string username, System.Collections.Generic.Dictionary<string, string> data) {
            return base.Channel.SetUserData(username, data);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User> SetUserDataAsync(string username, System.Collections.Generic.Dictionary<string, string> data) {
            return base.Channel.SetUserDataAsync(username, data);
        }
        
        public Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User UpdateUser(string username, Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User user) {
            return base.Channel.UpdateUser(username, user);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User> UpdateUserAsync(string username, Microsoft.Tools.TeamMate.Platform.CodeFlow.Project.User user) {
            return base.Channel.UpdateUserAsync(username, user);
        }
        
        public void DeleteUser(string username) {
            base.Channel.DeleteUser(username);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(string username) {
            return base.Channel.DeleteUserAsync(username);
        }
    }
}
